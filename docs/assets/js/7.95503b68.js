(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{210:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"learning-arm-exploit-development"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#learning-arm-exploit-development","aria-hidden":"true"}},[t._v("#")]),t._v(" Learning ARM Exploit Development")]),t._v(" "),e("h2",{attrs:{id:"_1-はじめに"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-はじめに","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. はじめに")]),t._v(" "),e("p",[t._v("このリポジトリは、ARM 32bit アーキテクチャのExploit について学習することができるリポジトリです。各章のドキュメントを読みつつARM Exploit 開発について学ぶことができます。本コンテンツの対象読者層は、x86, amd64 のExploit 開発をしたことがある人です。そのため、説明が少し省略されている部分もあるとは思いますがご了承ください。")]),t._v(" "),e("p",[t._v("ARM の解析環境をお持ちでない方は、本ページの末尾にある"),e("a",{attrs:{href:"#ARM%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89"}},[t._v("ARM環境構築")]),t._v("を参考に環境を構築してみてください。また、"),e("a",{attrs:{href:"/arm_exploit.tar.gz"}},[t._v("学習用ファイル")]),t._v(" を使っていくのでARM環境にダウンロードしてください。")]),t._v(" "),e("p",[t._v("Exploit コードには、プログラミング言語Ruby を利用しています。そのためホストOSにRuby の環境が必要となります。また、Exploit 用ライブラリ"),e("a",{attrs:{href:"https://github.com/peter50216/pwntools-ruby",target:"_blank",rel:"noopener noreferrer"}},[t._v("pwntools-ruby"),e("OutboundLink")],1),t._v(" をインストールしておくことで、サンプルコードを実行することができるようになります。")]),t._v(" "),e("h2",{attrs:{id:"_2-コンテンツ内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-コンテンツ内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. コンテンツ内容")]),t._v(" "),e("p",[t._v("下記に本コンテンツで学ぶことができる内容について表で示しています。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("#")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("タイトル")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("概要")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Crafting Shellcode")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ARM アセンブリの基礎からシェルコード作成まで学びます")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Buffer Overflow")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("スタックベースのバッファオーバーフローの原理を学びます")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Return to libc")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ARM Exploit におけるReturn to libcについて解説します")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Playing with Canary")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ARM におけるCanaryの特徴について解説します")])])])]),t._v(" "),e("h2",{attrs:{id:"_3-arm環境構築"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-arm環境構築","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. ARM環境構築")]),t._v(" "),e("p",[t._v("ARM の解析環境を持っていない人向けに環境構築の方法をご紹介します。持っている方はご自身の環境をご利用ください。ARM 環境の実現方法には、Qemu のシステムエミュレーションを利用します。また、ディストリビューションとしてはRaspberry Pi で有名なRaspbian (Debian Buster) を使用します。現段階ではホストOS には、macOS を想定していますが、おそらくQemu が動けば他のOS でも問題ないかと思います。")]),t._v(" "),e("p",[t._v("まずはじめに、Qemu をインストールしましょう。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ brew "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" qemu "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# macOS")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" qemu "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Ubuntu など")]),t._v("\n")])])]),e("p",[t._v("次に、エミュレートする際に必要な、カーネル、ディスクイメージ、DTB ファイルをダウンロードします。それぞれ以下のリンクからダウンロードしてください。")]),t._v(" "),e("ul",[e("li",[t._v("ディスクイメージ\n"),e("ul",[e("li",[t._v("http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/images/")]),t._v(" "),e("li",[t._v("2019-07-10-raspbian-buster-lite..zip (執筆当時)")])])]),t._v(" "),e("li",[t._v("カーネルとDTBファイル\n"),e("ul",[e("li",[t._v("https://github.com/dhruvvyas90/qemu-rpi-kernel")]),t._v(" "),e("li",[t._v("kernel-qemu-4.19.50-buster (執筆当時)")]),t._v(" "),e("li",[t._v("versatile-pb.dtb")])])])]),t._v(" "),e("p",[t._v("上記ファイルのダウンロードと解凍が終わったら、以下の内容のシェルスクリプト"),e("code",[t._v("run.sh")]),t._v(" を作成してください。localhost の10022/tcp をRaspbian の22/tcp につなぐ設定になっているので、都合が悪ければ適宜変更してください。また、8888/tcp はexploit コードを送信するために使います。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/sh")]),t._v("\nqemu-system-arm "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -kernel kernel-qemu-4.19.50-buster "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -cpu arm1176 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -M versatilepb "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -dtb versatile-pb.dtb "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -m "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -no-reboot "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -append "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root=/dev/sda2 panic=1 rootfstype=ext4 rw"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -hda "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2019")]),t._v("-07-10-raspbian-buster-lite.img "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -nographic "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n -net nic -net user,hostfwd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tcp::10022-:22,hostfwd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tcp::8888-:8888\n")])])]),e("p",[t._v("作成した"),e("code",[t._v("run.sh")]),t._v(" を実行するとカーネルの起動画面がターミナルに表示されます。しばらく待つと、以下のログインプロンプトが表示されるので、"),e("code",[t._v("pi:raspberry")]),t._v(" でログインできます。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Raspbian GNU/Linux 10 raspberrypi ttyAMA0\n\nraspberrypi login:\n")])])]),e("p",[t._v("デフォルトではsshのサービスが起動していないので必要であれば起動してください。"),e("code",[t._v("run.sh")]),t._v(" で指定したポート番号を用いて、"),e("code",[t._v("ssh -p 10022 pi@127.0.0.1")]),t._v(" でssh ログインすることができるようになります。")]),t._v(" "),e("p",[t._v("次に、本リポジトリで使うためのいくつかのソフトウェアをインストールしていきます。以下のコマンドを実行してください。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" socat auditd\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -q -O- https://github.com/hugsy/gef/raw/master/scripts/gef.sh "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n")])])]),e("p",[t._v("また、gefを使う際にロケールに起因したPythonのエラーが発生する可能性があるため、"),e("code",[t._v(".bashrc")]),t._v(" に以下の"),e("code",[t._v("export LC_ALL=C.UTF-8")]),t._v(" を追加して再度"),e("code",[t._v(".bashrc")]),t._v(" を読み込んでください。")]),t._v(" "),e("p",[t._v("以上で、環境構築は終了です。")])])}),[],!1,null,null,null);a.default=n.exports}}]);